  <!DOCTYPE html>
  <html lang="en">
  <head>
    <title>
      ES6 - ECMAScript2015    </title>
    <meta charset="utf-8" />
    <meta name="google-site-verification" content="OvbKxZt1vmzBca1Wusd1hAdnBY90jNbXqxUahFsjbUM" />
    <style type="text/css">
    #toc-wrapper {
      height: 100%;
    }

    </style>
    <link href="https://fonts.googleapis.com/css?family=Merriweather" rel="stylesheet">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.7.4/polyfill.js"></script>
    <link type="text/css" rel="stylesheet" href="./libs-3rd/bootstrap-4a3/css/bootstrap.css" />
    <link type="text/css" rel="stylesheet" href="./assets/css/styles.css" />
    <link type="text/css" rel="stylesheet" href="./libs-3rd/prettify/prettify.css" />
    <link type="text/css" rel="stylesheet" href="./libs-3rd/jquery.tocify.css" />
    <script src="https://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=" crossorigin="anonymous"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="./libs-3rd/bootstrap-4a3/js/bootstrap.js"></script>
    <script src="https://code.jquery.com/ui/1.12.0/jquery-ui.min.js" integrity="sha256-eGE6blurk5sHj+rmkfsGYeKyZx3M4bG+ZlFyA7Kns7E=" crossorigin="anonymous"></script>
    <script src="./libs-3rd/prettify/prettify.js?lang=js&amp;"></script>
    <script src="./libs-3rd/jquery.tocify.js"></script>
    <script>
    $(document).ready(function() {

      // Table o Contents for LH Sidebar. What to display
      $("#toc").tocify({
        theme: "bootstrap", // Added as per
        selectors: "h1,h2,h3,h4,h5"
      });

      codeApp.doInit()

      $("a[href^='http://'], a[href^='https://']").attr("target", "_blank")

    });

    </script>
  </head>

  <body>

    <div class="container-fluid">
    <!-- <div class="row-fluid">
      <div class="col-sm-12" id="header"></div>
    </div> -->
      <div class="row-fluid">
        <div class="col-sm-3">
          <div id="toc-wrapper">
            <div id="toc"></div>
          </div>
          <div id="output"></div>
        </div>
        <div class="col-sm-9">
 <div id="main-header"></div>
          <header>
            <img src="./assets/images/header2.jpg" class="img-fluid m-x-auto img-circle" alt="">
          </header>

        <section>
          <h1>ES6 - ECMAScript2015
        </h1>
          <section>
            <h2>Typed Arrays - Access to raw binary data
          </h2>
            <p>See also Section 6, 48 of Tony Alicea course
            </p>
          </section>
          <section>
            <h2>               Functions
                     </h2>
            <section>
              <h3>             Fat Arrow Functions
         </h3>
              <section>
                <h4>Basics</h4>
                <pre class="lang-js">
// No return statement in single line code
// Even though no args, still need parens

var fn = () => 'Ich bin Berliner!'
console.log(fn())

// Or
var fn = (a,b) => a*b
console.log(fn(3,7)) // 21

// Surplus args ignored
var fn = (a) => a*8
console.log(fn(3,7)) // 24

// With one arg, can omit parens
var fn = a => a*8
console.log(fn(3,7)) // 24

// Can use as callbacks...
setTimeout(()=>console.log('Ik bin das!'),1000)
</pre></section>
              <section>
                <h4>Fat Arrow Functions and <i>this</i>
                     </h4>
                <p> Lets return <code>this</code> using both a function and a fat arrow function.
                </p>
                <pre class="lang-js">
 // Traditional ES5 return of global object
 var fn = function(){
 return this
 }
 console.log(fn())

 // Using ES6, again <code>this</code> refers to global scope var fn = () => this;
 console.log(fn()) </pre>
              </section>
              <section>
  <h5>The Good Ole Days</h5>
  <aside style="float:right; width:440px;">This reminds me of some autistic children, who quite literally do not associate with their parents like your average kid. I had friends with one such kid, who would run off with other families when playing on the beech. There was no attachment to his true parents. </aside>

  <p>In traditional old style ES5 function declarations, the context of <code>this</code> is determined by the function that invokes it. Basically <code>this</code> changes its context dependent upon where it is called. This often calls for the use of - excuse the pun - call(), and apply(). </p>
  <p> So, we have <code>this</code> which forgets its origins when it finds itself in the scope of another function. Because of this such methods as call() are required to remind <code>this</code> from whence it came. </p>
  <div class="clear"></div>


                <p>
                </p>
                <p>Here is an example where 'fn' is called from within another function (method). This means that the context of this no longer refers to the global object as defined in the original fn() definition. </p>
                <pre> var fn = function(){ console.log(this) }

// var button = document.querySelector('button')
var button = document.getElementById("myButton")
// No parens after fn
button.addEventListener('click',fn)
</pre>
                <p><code>this</code> is bound to the button object, since a method of the button obj invoked the function fn()</p>
                <p>Here is a <a href="http://www.bennadel.com/resources/uploads/2011/using_call_and_apply_to_change_execution_context_in_javascript.jpg">useful graphic</a> to understand the scope of <code>this</code>. Full article by <a href="http://www.bennadel.com/blog/2265-changing-the-execution-context-of-javascript-functions-using-call-and-apply.htm">Ben Nadel</a>.</p>
              </section>
              <section>
                <h5>Fat Arrows make <code>this</code> more loyal to Daddy</h5>
                <p> <code>this</code> does not forget its origins.</p>
                <p><code>this</code> in Fat Arrow function maintains its context ie <code>this</code> is always bound to the context in which it was defined. So, in the example we get the global window object returned</p>
                <p>It does not matter where you call the function. It does not matter in which context you call the function. It does not matter in which scope you call the function, <code>this</code> will always refer to the context in which it was defined. In this eg, the global object.
                </p>
                <PRE>var fn2 = () => console.log(this)
var button = document.querySelector('button')
button.addEventListener('click',fn2)</PRE>
                <p>See how the Fat Arrow kid stays loyal to Daddy here:
                </p>
                <a href="https://jsfiddle.net/ma1colm/bvkvrd80/" class="" ><img src="./assets/images/css/jsfiddle.png" alt="View Code on JSFiddle" title="View Code on JSFiddle"></a>
              </section>
            </section>
               <section>
         <h2>Extended Parameter Handling</h2>
            <section>
              <h3>Default Parameter Values</h3>
              <p>Seems pretty logical</p>
              <p>Remember that function parameters assigned a value within function parens are not hoisted. So you can't do this:</p>
              <pre>
function(a = b, b = 7){

}
</pre></section>
            <section>
              <h3>Rest Parameter</h3>
              <div class="codeApp">
            <pre id="sumUp">var sumUp = function(...addMe) {
    let count = 0;
    addMe.forEach(function(item, i) {
        count += item
        console.log('Each array element: ', item);
    });
    console.log('Total: ', count);
};

sumUp(1, 4, 7, 4)</pre>
                <button onClick="codeApp.doDemo('sumUp')" class="sumUp btn btn-success">Run Code</button>
              </div>
              <!--  <script async src="https://jsfiddle.net/ma1colm/9a3tyrkL/embed/"></script> -->
            </section>
          </section>
          <section>
            <h2>Template Literals</h2>
            <article>
              <h3>Template Literals</h3>
              <p>Originally named 'template strings' in ES6 draft.</p>
              <script async src="https://jsfiddle.net/ma1colm/1L9qt6mu/embed/js,result/"></script>
            </article>
          </section>
          <section>
            <h2>Destructuring</h2>
            <article>
              <h3>Destructuring Arrays</h3>
              <script async src="https://jsfiddle.net/ma1colm/9875aubj/embed/js,result/"></script>
            </article>
            <article>
              <h3>Destructuring Objects</h3>
              <script async src="https://jsfiddle.net/ma1colm/dpLgu086/embed/js,result/"></script>
            </article>
          </section>
        </section>



</div>
</div>
<div id="tree1">  <div class="img-veil">
    </div></div>
<script src="./assets/js/codeApp.js"></script>
</body>

</html>
